#!/usr/bin/perl

# mox - Monitor XMPP presence
#
# Authors:
#   Thomas Liske <thomas@fiasko-nw.net>
#
# Copyright Holder:
#   2011 (C) Thomas Liske <thomas@fiasko-nw.net>
#
# License:
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this package; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
#

use Config;
use File::Basename;
use Getopt::Std;
use Log::Dispatch;
use Log::Dispatch::Screen;
use Log::Dispatch::Syslog;
use Log::Dispatch::File;
use POSIX qw(strftime);
use Proc::Daemon;
use Proc::PID::File;
use Net::XMPP;

use strict;
use warnings;

$0 = 'mox';

use constant {
    MOXD_VERSION => '0.1',

    XML_IQ_VERSION =>
"<query xmlns='jabber:iq:version'>
    <name>moxd</name>
    <version>%MOXVER%</version>
    <os>$Config{osname}</os>
</query>",

    XML_IQ_NOVCARD =>
"<vCard xmlns='vcard-temp'/>",

    XML_IQ_DISCO =>
"<query xmlns='http://jabber.org/protocol/disco#info'>
    <feature var='jabber:iq:last'/>
    <feature var='jabber:iq:version'/>
    <feature var='urn:xmpp:ping'/>
    <feature var='urn:xmpp:time'/>
    <feature var='vcard-temp'/>
</query>",

    XML_IQ_NOTIMPL =>
"<error type='cancel'>
    <feature-not-implemented xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
</error>",
};

my $logfmt = sub { my %p = @_; chomp($p{'message'}); return ("[$p{level}] $p{message}\n"); };
my $logffile = sub { my %p = @_;  return (scalar localtime())." [$$] $p{message}"; };
my $logger = Log::Dispatch->new(callbacks => $logfmt);

my $daemonize;
END {
    $logger->notice('terminated') if(defined($logger) && !defined($daemonize));
}

$logger->add(
    Log::Dispatch::Screen->new(
	name => 'console',
	min_level => 'notice',
    )
);

sub mydie($) {
    $logger->critical(shift);
    exit 1;
}

our $opt_c = '/etc/mox/mox.conf';
our $opt_f;
getopts('fc:');
mydie("Could not read config file '$opt_c'.") unless(-r $opt_c);
$logger->info("config file: '$opt_c'");

my %xmpp_conf;
my %auth_conf;
my %mox_conf;
my @mox_jids;
eval `cat "$opt_c"`;

# enable log to file
if(exists($mox_conf{'logfile'})) {
    $logger->add(
	Log::Dispatch::File->new(
	    name => 'logfile',
	    min_level => 'info',
	    filename => $mox_conf{'logfile'},
	    close_after_write => '1',
	    callbacks => $logffile,
	)
    );
}
# fallback to syslog
else {
    $logger->add(
	Log::Dispatch::Syslog->new(
	    name => 'syslog',
	    min_level => 'info',
	    ident => 'moxd',
	    logopt => 'pid',
	    facility => 'daemon',
	)
    );
}

$logger->info('moxd '.MOXD_VERSION);

my $conn;
unless($opt_f) {
    # daemonize
    $daemonize = 1;
    eval { Proc::Daemon::Init() };
    $daemonize = undef;
    mydie "Unable to fork daemon: $@" if($@);

    # check if we are alone
    eval {
	die "Daemon is already running or PID file is stale!" if(Proc::PID::File->running(verify => 1, dir => $mox_conf{'rundir'}));
    };
    mydie "Failed to setup PID file: $@" if($@);

    # detach log to console
    $logger->notice('Could not remove console dispatcher!') unless($logger->remove('console'));
}

my $state_changed = time();
while(1) {
    $conn = new Net::XMPP::Client;

    # register callbacks
    $conn->SetCallBacks(iq=>\&InIQ, presence=>\&InPresence);

    # try to connect
    unless($conn->Connect(%xmpp_conf)) {
        $logger->warning("Could not connect to XMPP server ($!), sleeping 30 seconds!");
        sleep(30);
        next;
    }
    $logger->info('XMPP server connected');

    # try to auth
    my @result = $conn->AuthSend(%auth_conf);
    unless($result[0] eq 'ok') {
        $logger->warning("Auth failed ($result[1]), sleeping 60 seconds!");
        sleep(60);
        next;
    }
    $logger->info('XMPP auth ok');

    $conn->PresenceSend(
	show => 'offline',
    );

    while(defined($conn->Process(60))) { };

    $logger->warning('XMPP connection broken, sleeping 30 seconds!');
    sleep(30);
}

# somebody query's an IQ
sub InIQ {
    my $sid = shift;
    my $iq = shift;

    my $from = $iq->GetFrom();
    my $to = $iq->GetTo();
    my $id = $iq->GetID();
    my $type = $iq->GetType();
    my $query = $iq->GetQuery();

    if($type eq 'get') {
        my $xmlns = $query->GetXMLNS();

        if ($xmlns eq 'jabber:iq:version') {
            my $iq = new Net::XMPP::IQ();
            $iq->SetIQ(to => $from, from => $to, id => $id, type => 'result');

            my $ver = XML_IQ_VERSION;
            my $i;
            $ver =~ s/%MOXVER%/${\(MOXD_VERSION)}/;
            $iq->InsertRawXML($ver);
            $conn->Send($iq);
        }
        elsif ($xmlns eq 'jabber:iq:last') {
            my $seconds = time() - $state_changed;

            my $iq = new Net::XMPP::IQ();
            $iq->SetIQ(to => $from, from => $to, id => $id, type => 'result');
            $iq->InsertRawXML("<query xmlns='jabber:iq:last' seconds='$seconds'/>");
            $conn->Send($iq);
        }
        elsif ($xmlns eq 'urn:xmpp:time') {
            my $iq = new Net::XMPP::IQ();
            $iq->SetIQ(to => $from, from => $to, id => $id, type => 'result');

            my $tzo = strftime('%z', localtime);
            $tzo =~ s/(.+)(..)/$1:$2/;
            my $utc = strftime('%FT%TZ', gmtime);
            $iq->InsertRawXML(
"<time xmlns='urn:xmpp:time'>
    <tzo>$tzo</tzo>
    <utc>$utc</utc>
</time>"
            );
            $conn->Send($iq);
        }
        elsif ($xmlns eq 'vcard-temp') {
            SendVCard(
                id => $id,
                type => 'result',
                to => $from,
                from => $to,
            );
        }
        elsif ($xmlns eq 'http://jabber.org/protocol/disco#info') {
            my $iq = new Net::XMPP::IQ();
            $iq->SetIQ(to => $from, from => $to, id => $id, type => 'result');
            $iq->InsertRawXML(XML_IQ_DISCO);
            $conn->Send($iq);
        }
        elsif ($xmlns eq 'urn:xmpp:ping') {
            my $iq = new Net::XMPP::IQ();
            $iq->SetIQ(to => $from, from => $to, id => $id, type => 'result');
            $conn->Send($iq);
        }
        else {
            my $iq = new Net::XMPP::IQ();
            $iq->SetIQ(to => $from, from => $to, id => $id, type => 'error');
            $iq->InsertRawXML(XML_IQ_NOTIMPL);
            $conn->Send($iq);

            $logger->notice("Unhandled IQ: $xmlns");
        }
    }
}

sub InPresence {
    my $sid = shift;
    my $presence = shift;

    return unless(scalar grep {$presence->GetFrom() =~ /$_/} @mox_jids);

    my $path = $mox_conf{'hooks'}.$presence->GetShow().'.d';
    if(-d $path && -r $path) {
	$logger->info("run-parts $path");

	$ENV{'MOX_FROM'} = $presence->GetFrom();
	$ENV{'MOX_SHOW'} = $presence->GetShow();
	$ENV{'MOX_STATUS'} = $presence->GetStatus();

	system("run-parts '$path'");
    }
    else {
	$logger->notice("presence hook directory not readable: $path");
    }
}
